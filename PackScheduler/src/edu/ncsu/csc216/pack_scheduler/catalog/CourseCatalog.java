/**
 * 
 */
package edu.ncsu.csc216.pack_scheduler.catalog;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;

import edu.ncsu.csc216.pack_scheduler.course.Course;
import edu.ncsu.csc216.pack_scheduler.io.CourseRecordIO;
import edu.ncsu.csc216.pack_scheduler.io.StudentRecordIO;
import edu.ncsu.csc216.pack_scheduler.user.Student;
import edu.ncsu.csc217.collections.list.SortedList;

/**
 * 
 * @author
 */
public class CourseCatalog {
	/** A sorted list of courses that make up catalog */
	private SortedList<Course> catalog;
	/** Number of Columns for the array generated by getCourseCatalogue	*/
	private static final int COURSE_CATALOG_COLUMNS = 4;
	/** Number of Columns for the array generated by getScheduledCourses	*/
	private static final int COURSE_SCHEDULE_COLUMNS = 4;
	/** Number of Columns for the array generated by getFullScheduledCourses	*/
	private static final int COURSE_FULL_SCHEDULE_COLUMNS = 7;

	/** 
	 * Constructs an empty catalog
	 */
	public CourseCatalog() {
		newCourseCatalog();
	}
	/** 
	 * Constructs an empty catalog
	 */
	public void newCourseCatalog() {
		catalog = new SortedList<Course>();
	}
	
	/**
	 * Constructs the student directory by reading in student information
	 * from the given file.  Throws an IllegalArgumentException if the 
	 * file cannot be found.
	 * @param fileName file containing list of students
	 */
	public void loadCoursesFromFile(String fileName) {
		try {
			catalog = CourseRecordIO.readCourseRecords(fileName);
		} catch (FileNotFoundException e) {
			throw new IllegalArgumentException("Unable to read file " + fileName);
		}
	}
	
	/** 
	 * This method iterates through the catalog array list searching for a course
	 * that matches the given course name and section. If the course is found, and can be added 
	 * to the student's schedule, the course is added and the method returns true.
	 * @param name courseName
	 * @param section courseSection
	 * @return true if the given course 1) exists in the catalog, and
	 * 2) is successfully added to the student's schedule, else not added and returns false.
	 * @throws IllegalArgumentException if attempting to add a course name
	 * to schedule which is already in schedule. Throws exception if there is a schedule conflict when
	 * attempting to add a course to the schedule.
	 */
	public boolean addCourseToCatalog(String name, String section, int credits, String InstructorId, String meetingDays, 
			int startTime, int endTime) {
//		if (getCourseFromCatalog(name, section) == null) {
//			return false;
//		}
		Course tempCourse = getCourseFromCatalog(name, section);
		//try {
			if (catalog.size() > 0) {
				for(int i = 0; i < catalog.size(); i++) {
					this.catalog.get(i).checkConflict(tempCourse);
					boolean duplicate = tempCourse.isDuplicate(this.catalog.get(i));
					if(duplicate) {
						throw new IllegalArgumentException("You are already enrolled in " + name);
					}
				}
			}
//		} catch (ConflictException e1) {
//			throw new IllegalArgumentException("The course cannot be added due to a conflict.");
//		}
		course = new Course(name, section, credits, InstructorId, meetingDays, startTime, endTime);
			catalog.add(getCourseFromCatalog(course));
			return true;
		}
	
	/** 
	 * This method removes an activity from the schedule if it is possible to do so.
	 * @param idx index of the activity to remove
	 * @return true if the given course is able to be removed from the schedule,
	 * or false if the course is not in the schedule.
	 */
	public boolean removeCourseFromCatalog(int idx) {
		try {
			catalog.remove(idx);
			return true;
		} catch (IndexOutOfBoundsException e) {
			return false;
		}
	}
	
	/**
	 * This method iterates through the catalog array list searching for a course
	 * that matches the given course name and section.
	 * @param name courseName
	 * @param section courseSection
	 * @return a course from ArrayListcatalog with given name and section,
	 * or null if no matching course is found
	 */
	public Course getCourseFromCatalog(String name, String section) {
		for(int i = 0; i < catalog.size(); i++) {
			String tempName = this.catalog.get(i).getName();
			String tempSection = this.catalog.get(i).getSection();
			if(name.equals(tempName) && section.equals(tempSection)) {
				return this.catalog.get(i);
			}
		}
		return null;
	}
	/** 
	 * This method returns a 2D String array with a row for each course,
	 * and a column for name, section, and title, meeting information. This is used for the GUI
	 * to create a table of catalog information. If catalog is empty, an empty string 
	 * array is returned instead.
	 * @return a 2D string array with course names, titles, and sections, meeting information
	 */
	public String[][] getCourseCatalog() {
		if (catalog.size() == 0) {
			return new String[0][0];
		} else {
			String[][] courseCatalog = new String[catalog.size()][COURSE_CATALOG_COLUMNS];
			for(int i = 0; i < catalog.size(); i++) {
				Course c = catalog.get(i);
				courseCatalog[i] = c.getShortDisplayArray();
			}
			return courseCatalog;
		}
	}
	/** 
	 * This method receives a filename as a string, and calls CourseRecordIO
	 * to write the student's schedule to a file.
	 * @param fileName where the student's file will be saved
	 */
	public void saveCourseCatalog(String fileName) {
		try {
			CourseRecordIO.writeCourseRecords(fileName, catalog);
		} catch (IOException e) {
			throw new IllegalArgumentException("The file cannot be saved.");
		}
	}
}
